{"mappings":"ACGA,eAAe,EAAsB,CAAS,CAAE,CAAM,EACpD,GAAI,CAEF,IAAM,EAAW,MAAM,MAAM,CAAC,oCAAoC,EAAE,EAAU,6EAA6E,CAAC,EACtJ,EAAO,MAAM,EAAS,IAA5B,GAGM,EAAY,SAAS,gBAAA,CAAiB,CAAC,CAAC,EAAE,EAAO,GAAG,CAAC,EAE3D,EAAK,UAAA,CAAW,OAAA,CAAQ,CAAC,EAAW,KAClC,IAAM,EAAW,CAAS,CAAC,EAAM,CAC3B,EAAe,EAAU,KAAA,CAAQ,GACjC,EAAiB,EAAe,EAAI,CAAC,EAAE,EAAa,IAAI,CAAC,CAAG,UAC5D,EAAY,EAAU,IAAA,CAAK,IAAA,CAC3B,EAAM,IAAI,KAAK,EAAU,IAAA,EAAM,kBAAA,CAAmB,QAAS,CAAE,KAAM,UAAW,OAAQ,SAAU,EACtG,CAAA,EAAS,WAAA,CAAc,CAAC,IAAI,EAAE,EAAU,EAAE,EAAE,EAAe,CAAC,EAAE,EAAI,CAAC,AACrE,EACF,CAAE,MAAO,EAAO,CACd,QAAQ,KAAA,CAAM,uBAAwB,EACxC,CACF,CAGA,OAAO,MAAA,CAAS,WACd,EAAsB,YAAa,iBACnC,EAAsB,YAAa,wBACrC,EAGA,MAAM,EAAe,SAAS,cAAA,CAAe,gBAC7C,EAAa,gBAAA,CAAiB,QAAS,WACrC,EAAsB,YAAa,iBACnC,EAAsB,YAAa,wBACrC,GAGA,YAAY,WACV,EAAsB,YAAa,iBACnC,EAAsB,YAAa,wBACrC,EAAG","sources":["<anon>","src/index.mjs"],"sourcesContent":["var $761f97bf09d51d3e$exports = {};\n// index.mjs\n// Function to fetch delay data and update UI\nasync function $761f97bf09d51d3e$var$fetchAndDisplayDelays(stationId, listId) {\n    try {\n        // Fetch data from BVG API\n        const response = await fetch(`https://v6.bvg.transport.rest/stops/${stationId}/departures?duration=30&results=5&linesOfStops=false&remarks=true&language=en`);\n        const data = await response.json();\n        // Update UI with delay and ETA information\n        const listItems = document.querySelectorAll(`#${listId} li`);\n        data.departures.forEach((departure, index)=>{\n            const listItem = listItems[index];\n            const delayMinutes = departure.delay / 60;\n            const formattedDelay = delayMinutes > 0 ? `${delayMinutes} min` : \"On time\";\n            const busNumber = departure.line.name; // Get the bus number\n            const eta = new Date(departure.when).toLocaleTimeString(\"en-US\", {\n                hour: \"numeric\",\n                minute: \"numeric\"\n            }); // Calculate ETA\n            listItem.textContent = `Bus ${busNumber}: ${formattedDelay} ${eta}`; // Display bus number, delay, and ETA\n        });\n    } catch (error) {\n        console.error(\"Error fetching data:\", error);\n    }\n}\n// Call the function to update the tables for Bouche station when the page loads\nwindow.onload = function() {\n    $761f97bf09d51d3e$var$fetchAndDisplayDelays(\"900190506\", \"stationBouche\");\n    $761f97bf09d51d3e$var$fetchAndDisplayDelays(\"900120521\", \"stationMarkgrafendamm\"); // Replace with the actual station ID\n};\n// Add event listener to the update button\nconst $761f97bf09d51d3e$var$updateButton = document.getElementById(\"updateButton\");\n$761f97bf09d51d3e$var$updateButton.addEventListener(\"click\", function() {\n    $761f97bf09d51d3e$var$fetchAndDisplayDelays(\"900190506\", \"stationBouche\");\n    $761f97bf09d51d3e$var$fetchAndDisplayDelays(\"900120521\", \"stationMarkgrafendamm\"); // Replace with the actual station ID\n});\n// Auto-update every 10 seconds\nsetInterval(function() {\n    $761f97bf09d51d3e$var$fetchAndDisplayDelays(\"900190506\", \"stationBouche\");\n    $761f97bf09d51d3e$var$fetchAndDisplayDelays(\"900120521\", \"stationMarkgrafendamm\"); // Replace with the actual station ID\n}, 10000); // 10000 milliseconds = 10 seconds\n\n\n//# sourceMappingURL=index.6d23853a.js.map\n","// index.mjs\n\n// Function to fetch delay data and update UI\nasync function fetchAndDisplayDelays(stationId, listId) {\n  try {\n    // Fetch data from BVG API\n    const response = await fetch(`https://v6.bvg.transport.rest/stops/${stationId}/departures?duration=30&results=5&linesOfStops=false&remarks=true&language=en`);\n    const data = await response.json();\n\n    // Update UI with delay and ETA information\n    const listItems = document.querySelectorAll(`#${listId} li`);\n\n    data.departures.forEach((departure, index) => {\n      const listItem = listItems[index];\n      const delayMinutes = departure.delay / 60;\n      const formattedDelay = delayMinutes > 0 ? `${delayMinutes} min` : 'On time';\n      const busNumber = departure.line.name; // Get the bus number\n      const eta = new Date(departure.when).toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric' }); // Calculate ETA\n      listItem.textContent = `Bus ${busNumber}: ${formattedDelay} ${eta}`; // Display bus number, delay, and ETA\n    });\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n}\n\n// Call the function to update the tables for Bouche station when the page loads\nwindow.onload = function () {\n  fetchAndDisplayDelays('900190506', 'stationBouche');\n  fetchAndDisplayDelays('900120521', 'stationMarkgrafendamm'); // Replace with the actual station ID\n};\n\n// Add event listener to the update button\nconst updateButton = document.getElementById('updateButton');\nupdateButton.addEventListener('click', function () {\n  fetchAndDisplayDelays('900190506', 'stationBouche');\n  fetchAndDisplayDelays('900120521', 'stationMarkgrafendamm'); // Replace with the actual station ID\n});\n\n// Auto-update every 10 seconds\nsetInterval(function () {\n  fetchAndDisplayDelays('900190506', 'stationBouche');\n  fetchAndDisplayDelays('900120521', 'stationMarkgrafendamm'); // Replace with the actual station ID\n}, 10000); // 10000 milliseconds = 10 seconds\n"],"names":["$761f97bf09d51d3e$var$fetchAndDisplayDelays","stationId","listId","response","fetch","data","json","listItems","document","querySelectorAll","departures","forEach","departure","index","listItem","delayMinutes","delay","formattedDelay","busNumber","line","name","eta","Date","when","toLocaleTimeString","hour","minute","textContent","error","console","window","onload","$761f97bf09d51d3e$var$updateButton","getElementById","addEventListener","setInterval"],"version":3,"file":"index.6d23853a.js.map"}